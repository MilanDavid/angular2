{"ast":null,"code":"import { RecepieService } from '../recepies/recepies.service';\nimport 'rxjs/Rx';\nimport 'rxjs-compat/add/operator/map';\nimport { AuthService } from '../auth/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../recepies/recepies.service\";\nimport * as i3 from \"../auth/auth.service\";\nexport class FirebaseService {\n  httpClient;\n  recepieService;\n  authService;\n\n  constructor(httpClient, recepieService, authService) {\n    this.httpClient = httpClient;\n    this.recepieService = recepieService;\n    this.authService = authService;\n  }\n\n  saveRecepie() {\n    const token = this.authService.getToken();\n    return this.httpClient.put('https://cookbook-a8f78.firebaseio.com/recepies.json?auth=' + token, this.recepieService.getRecepies());\n  }\n\n  getRecepies() {\n    // const token = this.authService.getToken();\n    // return this.http.get('https://cookbook-a8f78.firebaseio.com/recepies.json?auth=' + token)\n    return this.httpClient.get('https://cookbook-a8f78.firebaseio.com/recepies.json').map(response => {\n      const recepies = response;\n\n      for (const recepie of recepies) {\n        if (!recepie['ingredients']) {\n          console.log(recepie);\n          recepie['ingredients'] = [];\n        }\n      }\n\n      return recepies;\n    }).subscribe(recepies => {\n      const recepiesData = recepies;\n      this.recepieService.setRecepies(recepiesData);\n      console.log(recepiesData);\n    });\n  }\n\n  static ɵfac = function FirebaseService_Factory(t) {\n    return new (t || FirebaseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RecepieService), i0.ɵɵinject(i3.AuthService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseService,\n    factory: FirebaseService.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module"}